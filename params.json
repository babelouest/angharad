{
  "name": "Angharad",
  "tagline": "House automation system with a REST/Json interface",
  "body": "# Angharad\r\n\r\nHouse automation system API server\r\n\r\n![example snapshot](https://github.com/babelouest/sagremor/raw/master/snapshots/dashboard-filled.png)\r\nCentral program and orchestrator of the following submodules:\r\n\r\n- [Benoic](https://github.com/babelouest/benoic): Command house automation devices as lights, heaters, sensors, switches. Currently [ZWave](http://www.z-wave.com/) and [Taulas](https://github.com/babelouest/taulas) devices are supported\r\n- [Carleon](https://github.com/babelouest/carleon): Command house automation side services (music, camera, etc)\r\n- [Gareth](https://github.com/babelouest/gareth): Logs and messenger service\r\n\r\nAngharad integrates all those submodules functionnalities and manages scripts, events, user profiles, and a small static file server.\r\n\r\nBenoic and Carleon implement a dynamic lbrary loading interface to add/remove/update modules without having to recompile all the system every time an update or an improvement is made.\r\n\r\nEach module are compiled independently and have its own dependencies.\r\n\r\n# Prerequisites\r\n\r\nAll Angharad system, its submodules and its custom libraries are written in C language, for better preformance and lightweight resources consumption. GCC and Makefile were used for the development.\r\n\r\n## External dependencies\r\n\r\n### TL;DR\r\n\r\nOn Debian-based systems (Debian, Raspbian, Ubuntu), use the following comand to install dependencies:\r\n\r\n```shell\r\nsudo apt-get install libmicrohttpd-dev libjansson-dev libcurl4-gnutls-dev uuid-dev libldap2-dev libmysqlclient-dev libsqlite3-dev libconfig-dev\r\n\r\ngit clone https://github.com/babelouest/orcania.git\r\ncd orcania\r\nmake\r\nsudo make install\r\n\r\ngit clone https://github.com/babelouest/yder.git\r\ncd yder/src\r\nmake\r\nsudo make install\r\n\r\ngit clone https://github.com/babelouest/ulfius.git\r\ncd ulfius/src\r\nmake\r\nsudo make install\r\n\r\ngit clone https://github.com/babelouest/hoel.git\r\ncd hoel/src\r\nmake\r\nsudo make install\r\n```\r\n\r\nThe following external libraries are required to build Angharad:\r\n- [libuuid](https://sourceforge.net/projects/libuuid/), UUID generator\r\n- [libldap](http://www.openldap.org/devel//cvsweb.cgi/libraries/libldap?hideattic=0&sortbydate=0), ldap API\r\n- [libconfig](http://www.hyperrealm.com/libconfig/), Configuration File Library\r\n- [jansson](http://www.digip.org/jansson/), json manipulation library\r\n\r\nThe following other external libraries are required to build angharad dependencies:\r\n- [libmicrohttpd](https://www.gnu.org/software/libmicrohttpd/), HTTP server library\r\n- [libcurl](https://curl.haxx.se/libcurl/), HTTP client library\r\n- [MySQL client API](https://dev.mysql.com/doc/refman/5.7/en/c-api.html), MySQL/MariaDB API\r\n- [SQLite3](https://www.sqlite.org/), SQLite API\r\n\r\nAnd finally, Angharad depends on the following libraries:\r\n- [Orcania](https://github.com/babelouest/orcania), Potluck with different functions for different purposes that can be shared among angharad programs\r\n- [Yder](https://github.com/babelouest/yder), Logging library\r\n- [Ulfius](https://github.com/babelouest/ulfius), Web Framework for REST Applications\r\n- [Hoel](https://github.com/babelouest/hoel), Database abstraction library\r\n\r\n## Benoic modules prerequisites\r\n\r\nBenoic implements a ZWave module to control ZWave nodes and a [Taulas](https://github.com/babelouest/taulas) module.\r\n\r\nThe Benoic module is based on the [OpenZwave library](http://www.openzwave.net/). You must download and install this library before installing benoic zwave device module, version 1.2 or above, preferably a stable version.\r\n\r\n## Carleon modules prerequisites\r\n\r\nCarleon modules available are the following:\r\n- Motion control, to view pictures and real-time streams of a motion application\r\n- MPD Control, for basic control of a MPD instance: volume, play/pause/stop and playlist loading, depends on [libmpdclient](https://www.musicpd.org/libs/libmpdclient/) (`apt-get install libmpdclient-dev`)\r\n- Liquidsoap Control, for basic control of a [liquidsoap](http://liquidsoap.fm/) based webradio: play/stop/next and view the 10 last played songs\r\n\r\n# Installation\r\n\r\n## Main system compilation\r\n\r\nWhen all prerequisites are installed, clone angharad from github, and git install submodules:\r\n\r\n```shell\r\ngit clone https://github.com/babelouest/angharad.git\r\ncd angharad\r\ngit submodule update --init\r\nmake\r\n```\r\n\r\nThis will compile angharad program, and all device-modules for Benoic and services for Carleon.\r\n\r\n## Full system installation\r\n\r\nGo back to angharad source folder, then as root, run `make install`:\r\n\r\n```shell\r\ncd angharad\r\nsudo make install\r\n```\r\n\r\n## Benoic modules\r\n\r\nBenoic modules are located in the folder `benoic/device-modules`. If you want to adapt or change the modules for your needs, you can manually compile them.\r\n\r\nThe module named `device-mock.c` is a mock device that is used to test the behaviour of a module with benoic and angharad systems. A mock device doesn't control any real hardware, but simulates the behaviour of a device. You can use it to help you write your own device module.\r\n\r\n```shell\r\ncd benoic/device-modules\r\nmake libdevzwave.so # For ZWave device\r\nmake libdevtaulas.so # For Taulas device\r\nmake libdevmock.so # For mock device\r\nsudo make install # to install compiled devices in $PREFIX/lib/angharad/benoic directory\r\n```\r\n\r\n## Carleon modules\r\n\r\nCarleon service are located in the folder `carleon/service-modules/`.\r\n\r\nThe service named `service-mock.c` is a mock service that is used to test the behaviour of a service with carleon and angharad systems. A mock service doesn't control any real service, but simulates one. You can use it to help you write your own service.\r\n\r\n```shell\r\ncd carleon/service-modules/\r\nmake libservicemotion.so # For Motion service\r\nmake libservicempd.so # For MPD service\r\nmake libserviceliquidsoap.so # For MPD service\r\nmake libservicemock.so # For mock service\r\nsudo make install # to install compiled devices in $PREFIX/lib/angharad/carleon directory\r\n```\r\n\r\n## Database installation\r\n\r\nDepending on your needs, you can use a sqlite3 database (single file, fast and reliable) or a MySQL Database (fast and reliable as well but also more secure).\r\n\r\n### MySQL Installation\r\n\r\nRun the SQL script angharad.mariadb.sql file under an already existing database.\r\n\r\n```shell\r\nmysql < angharad.mariadb.sql\r\n```\r\n\r\n### SQLite3 installation\r\n\r\nRun the SQL script angharad.sqlite3.sql file in an existing or a new SQLite3 database file:\r\n```shell\r\nsqlite3 angharad.db < angharad.sqlite3.sql\r\n```\r\n\r\n# Configuration\r\n\r\nThe file angharad.conf.sample contains a sample file with all the configuration parameters needed, just fill the parameters with your own environment. Paths can be relatives or absolute.\r\n\r\nCopy `angharad.conf.sample` into your configuration folder as `angharad.conf`\r\n\r\n```shell\r\ncp angharad.conf.sample /usr/local/etc/angharad.conf\r\n```\r\n\r\n## Static file server\r\n\r\n`static_files_path` and `static_files_prefix` are used for the static files server, in this case, [Sagremor](https://github.com/babelouest/sagremor) is the dedicated web application and can be hosted there.\r\n\r\nBeware that the static web server is not secured with SSL connection, so don't use it outside a trusted network. i.e., don't forward ports directly outside your network.\r\n\r\nIf you want to access angharad in a secure connection, you can use apache `mod_proxy` and an https instance for example, and embed angharad access in it.\r\n\r\n## Database\r\n\r\nSpecify the database parameters in the `database {}` block, depending on your database configuration (SQLite3 or MySQL).\r\n\r\n## Authentication\r\n\r\nCurrently, 2 types of authentication are supported, database users or LDAP authentication. If you use database authentication, you can manage users with the dedicated API.\r\n\r\nPlease note that users and profile are not linked, any authenticated user can use any profile.\r\n\r\n# Run Angharad\r\n\r\nTo run angharad, simply execute the command:\r\n\r\n```shell\r\n/usr/local/bin/angharad --config-file=/usr/local/etc/angharad.conf\r\n```\r\n\r\nCheck the log messages in the log file, syslog or the console, depending on your configuration, then the server will be up and running when you'll se the following log message:\r\n\r\n```log\r\nyyyy-mm-dd hh:mm:ss - Angharad INFO: Start angharad on port 2473\r\n```\r\n\r\nNow you can access Angharad API via a third party application like [Sagremor](https://github.com/babelouest/sagremor).\r\n\r\n# API Documentation\r\n\r\nThe full API Documentation can be found in the files `API.md` (except for Gareth who is a loner):\r\n\r\n- [Angharad API](API.md)\r\n- [Benoic API](https://github.com/babelouest/benoic/blob/master/API.md)\r\n- [Carleon API](https://github.com/babelouest/carleon/blob/master/API.md)\r\n- [Gareth API](https://github.com/babelouest/gareth)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}